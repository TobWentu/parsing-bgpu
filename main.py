import telebot
from telebot import types
import time
import requests
from bs4 import BeautifulSoup
import json
import re
import mysql.connector
import random
from fuzzywuzzy import process

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = 'token'
data = []
names = []
user_fio = {}
search_type = 0

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
connection = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",
    database="staff"
)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –§–ò–û –∏–∑ —Ñ–∞–π–ª–∞ data.json
def upload_file():
    global names
    with open("data.json", "r", encoding="utf-8") as file:
        names = json.load(file)

def save_file(data):
    with open("data.json", 'w', encoding="UTF-8") as file:
        json.dump(data, file, ensure_ascii=False)
    return data  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

def save_data():
    global data
    link = "https://bspu.ru/unit/61/users"
    response = requests.get(link).text
    soup = BeautifulSoup(response, 'lxml')
    blocks = soup.find_all('div', class_='media-body')
    for block in blocks:
        headers = block.find_all('h4')
        if headers:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã h4 –≤ –±–ª–æ–∫–µ
            search = headers[0].text
            data.append(search)
            save_file(data)
            # print(search)

#—ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ json –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_database():
    upload_file()
    global connection, names
    connection = mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="staff")
    
    # –ü—Ä–æ—Ö–æ–¥ –ø–æ –∫–∞–∂–¥–æ–º—É –∏–º–µ–Ω–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –Ω–∞ Google Scholar
    for name in names:
        link = f"https://scholar.google.com/scholar?hl=ru&as_sdt=0%2C5&q={name}&DevX="
        response = requests.get(link).content
        soup = BeautifulSoup(response, 'lxml')
        blocks = soup.find('div', id='gs_res_ccl')
        asd = blocks.find_all('div', class_='gs_ri')
        cursor = connection.cursor()
        for block in asd:
            search_tag = block.find_all('h3')[0]  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ <h3>
            if search_tag:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–≥ <h3>
                a_tag = search_tag.find('a')  # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–≥ <a> –≤–Ω—É—Ç—Ä–∏ <h3>
                if a_tag:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ —Ç–µ–≥ <a>
                    href = a_tag['href']  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ href (—Å—Å—ã–ª–∫—É)
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–≥–∞ <h3>
                    search_text = search_tag.text
                    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ "[PDF]" –∏ "[HTML]"
                    search_cleaned = re.sub(r'\[.*?\]', '', search_text).strip()
                    # –í—Å—Ç–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
                    sql = "INSERT INTO staff (name, result, link) VALUES (%s, %s, %s)"  # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å SQL
                    val = (name, search_cleaned, href)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ href
                    cursor.execute(sql, val)
                    connection.commit()



connection.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_message(message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data='button1')
    btn2 = types.InlineKeyboardButton('–ü–æ–∏—Å–∫', callback_data='button2')
    markup.add(btn1)
    markup.add(btn2)
    
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:', reply_markup=markup)


@bot.message_handler(commands=['my_id'])
def get_user_id(message):
    user_id = message.from_user.id
    bot.reply_to(message, f"–í–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    global search_type
    markup = types.InlineKeyboardMarkup()
    if call.data == 'button1':
        if call.from_user.id == 1233741974:
            markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data='button1')
            btn2 = types.InlineKeyboardButton('–ü–æ–∏—Å–∫', callback_data='button2')
            markup.add(btn1)
            markup.add(btn2)
            bot.answer_callback_query(call.id, '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...')
            bot.send_message(call.message.chat.id, 'üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...')
            save_data()
            save_database()
            bot.send_message(call.message.chat.id, '‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!', reply_markup=markup)
            time.sleep(2)
        else:
            bot.send_message(call.message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!', reply_markup=markup)
    elif call.data == 'button2':
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–§–∞–º–∏–ª–∏—è, –ò–º—è, –û—Ç—á–µ—Å—Ç–≤–æ', callback_data='—Ñ–∏–æ')
        btn2 = types.InlineKeyboardButton('–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç–∞—Ç—å–∏', callback_data='—Å—Ç–∞—Ç—å–µ')
        markup.add(btn1)
        markup.add(btn2)
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫:', reply_markup=markup)
    elif call.data == '—Ñ–∏–æ':
        search_type = 1
        user_fio[call.message.chat.id] = True
        bot.send_message(call.message.chat.id, 'üíæ –ù–∞–ø–∏—à–∏—Ç–µ –§–∞–º–∏–ª–∏—é, –ò–º—è, –û—Ç—á–µ—Å—Ç–≤–æ:')
    elif call.data == '—Å—Ç–∞—Ç—å–µ':
        search_type = 2
        user_fio[call.message.chat.id] = True
        bot.send_message(call.message.chat.id, 'üíæ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:')
    elif call.data == '–ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫ 1':
        search_type = 1
        user_fio[call.message.chat.id] = True
        bot.send_message(call.message.chat.id, 'üíæ –ù–∞–ø–∏—à–∏—Ç–µ –§–∞–º–∏–ª–∏—é, –ò–º—è, –û—Ç—á–µ—Å—Ç–≤–æ:')
    elif call.data == '–ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫ 2':
        search_type = 2
        user_fio[call.message.chat.id] = True
        bot.send_message(call.message.chat.id, 'üíæ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:')

@bot.message_handler(content_types=['text'])
def handle_text(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–ª –§–ò–û
    if message.chat.id in user_fio and user_fio[message.chat.id]:
        connection = mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="staff")
        cursor = connection.cursor()
        fio = message.text
        if search_type == 1:
            query = "SELECT name FROM staff"
            cursor.execute(query)
            names = [name[0] for name in cursor.fetchall()]
            markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫', callback_data='–ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫ 1')
            markup.add(btn1)
            # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –§–ò–û —Å –ø–æ–º–æ—â—å—é fuzzywuzzy
            matched_name, ratio = process.extractOne(fio, names)

            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –µ—Å–ª–∏ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if ratio >= 80:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ –≤–∞—à–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é
                query = f"SELECT result, link FROM staff WHERE name = '{matched_name}'"
                cursor.execute(query)
                results = cursor.fetchall()
                bot.send_message(message.chat.id, f'‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É "{matched_name}"', reply_markup=markup)
                # print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è: {matched_name}")
                count = 1
                for result, link in results:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown
                    message_text = f"""üìé –°—Ç–∞—Ç—å—è (‚Ññ{count}):
üìù {result}\n‚ÜóÔ∏è [–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é]({link})"""
                    bot.send_message(message.chat.id, message_text, parse_mode='Markdown')
                    count += 1
                markup = types.InlineKeyboardMarkup()
                btn1 = types.InlineKeyboardButton('–§–∞–º–∏–ª–∏—è, –ò–º—è, –û—Ç—á–µ—Å—Ç–≤–æ', callback_data='—Ñ–∏–æ')
                btn2 = types.InlineKeyboardButton('–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç–∞—Ç—å–∏', callback_data='—Å—Ç–∞—Ç—å–µ')
                markup.add(btn1)
                markup.add(btn2)
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫:', reply_markup=markup)
            else:
                bot.send_message(message.chat.id, f'‚ùå –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ.', reply_markup=markup)
        
        elif search_type == 2:
            query = "SELECT result FROM staff"
            cursor.execute(query)
            titles = [title[0] for title in cursor.fetchall()]
            
            markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫', callback_data='–ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫ 2')
            markup.add(btn1)
            # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏ —Å –ø–æ–º–æ—â—å—é fuzzywuzzy
            matched_title, ratio = process.extractOne(fio, titles)

            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –µ—Å–ª–∏ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if ratio >= 60:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ –≤–∞—à–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é
                query = f"SELECT name FROM staff WHERE result = '{matched_title}'"
                cursor.execute(query)
                results = cursor.fetchall()

                for name, in results:
                    bot.send_message(message.chat.id, f"""
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {matched_title}
üë§ –ê–≤—Ç–æ—Ä: {name}""", reply_markup=markup)
            else:
                bot.send_message(message.chat.id, f'‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ.', reply_markup=markup)
        user_fio[message.chat.id] = False
# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
bot.polling()
print("–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω!")
